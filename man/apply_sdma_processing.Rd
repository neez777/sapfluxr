% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/01e_heat_pulse_velocity_core.R
\name{apply_sdma_processing}
\alias{apply_sdma_processing}
\title{Apply Selectable Dual Method Approach (sDMA) Processing}
\usage{
apply_sdma_processing(vh_results, secondary_method, show_progress = TRUE)
}
\arguments{
\item{vh_results}{Results tibble from calc_heat_pulse_velocity() containing HRM
and at least one secondary method}

\item{secondary_method}{Character string or vector specifying secondary method(s).
Options: "MHR", "Tmax_Coh", "Tmax_Klu", "HRMXa", "HRMXb".
Can provide multiple methods to create multiple sDMA variants.}

\item{show_progress}{Logical indicating whether to show progress bar. Default: TRUE}
}
\value{
A vh_results tibble with additional rows for sDMA method(s).
Each sDMA method is labeled as "sDMA:SecondaryMethod" (e.g., "sDMA:MHR").
The selected_method column shows which method was actually used for each measurement.
}
\description{
Applies method switching based on Peclet number to create sDMA results.
Switches between HRM (Pe < 1.0) and a user-specified secondary method (Pe >= 1.0).
HRM results must already be calculated with Peclet numbers.
}
\details{
This function requires:
\itemize{
\item HRM results with Peclet numbers (from calc_heat_pulse_velocity with methods including "HRM")
\item At least one secondary method already calculated
}

The switching logic is:
\itemize{
\item Pe < 1.0: Use HRM (low flows, HRM is accurate)
\item Pe >= 1.0: Use secondary method (high flows, secondary method more appropriate)
}
}
\examples{
\dontrun{
# Calculate base methods
heat_pulse_data <- read_heat_pulse_data("data.txt")
vh <- calc_heat_pulse_velocity(heat_pulse_data,
                                methods = c("HRM", "MHR", "Tmax_Klu"))

# Apply sDMA with MHR as secondary
vh_sdma <- apply_sdma_processing(vh, secondary_method = "MHR")

# Create multiple sDMA variants
vh_sdma <- apply_sdma_processing(vh, secondary_method = c("MHR", "Tmax_Klu"))

# Plot sDMA results
plot_sdma_timeseries(vh_sdma, sdma_method = "sDMA:MHR")
}

}
